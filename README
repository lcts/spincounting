Version: v1.2.3
Author:  Christopher Engelhard
Date:    2015-08-29
COMMENTS/SUGGESTIONS/BUGS/REQUESTS:
christopher.engelhard@fu-berlin.de


SYNTAX:
spincounting
nspins = spincounting
nspins = spincounting('Option1', Value1, 'Option2', Value2, ...)
nspins = spincounting(optionstruct)
[nspins, tfactor, dintnorm, results] = spincounting(optionstruct) 

INPUTS:
All top-level parameters can be given as either Option-Value pairs or in the form of a struct (see examples).
The full list of parameters is:

optionstruct
            .tunefile             : Tune picture file, default: Prompt
            .specfile             : Spectrum file, default: Prompt
            .outfile              : Filename under which to save output, default: Prompt
            .nosave               : boolean, don't save anything if true, default: false
            .clobber              : overwrite existing files, default: false
            .noplot               : do not display plots. They are still generated and saved, default: false
            .nspins               : # of spins in sample, default: false
            .tfactor              : spectrometer transfer factor, default: false
            .q                    : quality factor q. Setting this disables all q-factor 
                                    calculation related functionality, default: false
            .S                    : spin of sample, default: 1/2
            .maxpwr               : maximum microwave power, default: 200mW
            .tunepicscaling       : scaling of the tune picture in MHz/s, default: 6,94e4
            .qparams              : parameters passed on to FitResDip
                    .background   : indices of background, default: auto
                    .smoothing    : # of points used for smoothing, default 2.5% of total
                    .order        : order of background correction used, default 3
                    .dipmodel     : model used for dip fitting, default: lorentz
            .intparams            : parameters passed on to DoubleInt
                      .background : indices of background, default: auto
                      .order      : order of background correction used, # of elements
                                    determines # of steps, default [3 3]

More detailed descriptions of qparams, intparams in their respective functions.

OUTPUTS:
nspins:   calculated number of spins (returns NaN if transfer factor unknown)
tfactor:  calculated transfer factor (retursn NaN if number of spins unknown)
dintnorm: double integral of background-corrected spectrum, measurement parameters taken into account
results:  a structure containing internal parameters including the various fits, backgrounds and spectra
          the quality factor and double integrals



USAGE:
The program takes a cw-EPR spectrum and calculates the absolute number of spins in the sample from it, taking into account the various factors like modulation amplitude/microwave power etc. that influence the apparent intensity. The program can be run fully interactively with no parameters needed as well as fully integrated into external MATLAB scripts.

Two of the factors impacting signal intensity cannot be read from the measurement parameters:
The q-factor, which is a function of the resonator and the spectrometer transfer factor, the proportionality between number of spins and parameter-corrected spectral intensity as detected by the spectrometer, which is a function of the spectrometer/resonator used.
The q-factor is determined by fitting and measuring the dip passed to it in the form of a tune picture file, the latter can be calculated by measuring a sample with a known number of spins and running the result through this program.
q-factor, number of spins and the spectrometer transfer factor can all be passed to the program as options:
Passing nspins and/or tfactor determines the operation mode.
 - neither:	calculate normalized double integral
 - nspins:	calculate tfactor from spectrum
 - tfactor:	calculate nspins from spectrum
 - both:	check tfactor against nspins using the given spectrum
Passing q is only useful in two cases:
 - the quality factor has been determined by alternate means
 - the program is used to compare measurements that can be assumed to have identical q

All relevant parameters are printed to stdout as well as saved to a file. Additionally, the results from fitting, background correction and integration are displayed in two plots:
 - tune picture:
   - data blue, fit red/dashed
   - bg fit red/dashed/thin, area used for bg correction shaded
 - spectrum:
   - data blue, first integral green, second integral red
   - blue/green dotted: bg fits, area used for bg correction shaded
   - red dotted: max/min used for determination of double integral
These figures are also by default saved to file.

For a good result it is vitally important that the background corrections and fits used are as good as possible. Always check that the program has achieved a good background fit, especially for the second integration. If not, try messing with the areas used for background correction before messing with the fitting models. A good background correction in the double integration is indicated by a flat first and second integral in the shaded areas.

Documentation of the various functions can be found within their respective m-files. Some of them might be useful for other purposes as well.


CURRENT LIMITATIONS:
 - there are only a limited amount of input file formats supported. If you need a different format, mail me.
 - loading of tune pic data should work with any Tektronix Oscilloscope file in CSV format, but this has only been tested for
   Tektronix TDS 2002C
 - While the dip is autodetected, this has only been tested for cases where the full tune picture is recorded, i.e. there were flat areas to the left and to the right of the tune pic. Always check the figure to see if the fit makes sense, try specifying the background area manually if not.
 - the time resolution of the tune file is currently not read and therefore needs to be set to 50us/div. Alternatively you can pass 'tunepicscaling' to the program to correct for this.

THIS PROGRAM IS STRICTLY GIGO: GARBAGE IN, GARBAGE OUT.
If you overmodulate with a badly calibrated modulation amplitude, saturate your sample or, use nonsense background corrections or do other silly stuff, then this is just a random number generator.


EXAMPLES
 - Determine number of spins automatically, using a known transfer factor of 5.7e4:

nspins = spincounting('tfactor', 5.7e4)

 - Determine the transfer factor from a sample with known number of spins:
 
[~, tfactor] = spincounting('nspins', 3e14)

Since we know that nspins is 3e14, we don't need that return value. By specifying '~' as a variable to save the number of spins to, this return value is dumped by MatLab.

 - specify input files directly, without using the dialog
 
nspins = spincounting('tfactor', 5.7e4, 'tunefile', 'path/to/tunefile.dat', 'specfile', 'path/to/specfile.dat')

 - the same, but using a config struct instead of option-value pairs
 
options.tfactor = 5.7e4;
options.tunefile = 'path/to/tunefile.dat'
options.specfile = 'path/to/specfile.dat'
nspins = spincounting(options)

 - manually change the background values used for correction of the spectrum
 
integration_parameters.background = [3300 3440 3450 3500]
nspins = spincounting('tfactor', 5.7e4, 'intparams', integration_parameters)
